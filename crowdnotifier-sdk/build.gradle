plugins {
	id 'com.android.library'
	id 'maven-publish'
	id 'com.jfrog.bintray'
	id 'org.sonarqube' version '3.0'
	id 'com.google.protobuf'
}

android {
	compileSdkVersion 30
	buildToolsVersion "29.0.3"

	defaultConfig {
		minSdkVersion 23
		targetSdkVersion 30
		versionCode 1100
		versionName "1.1"

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		consumerProguardFiles "consumer-rules.pro"
	}

	defaultPublishConfig "release"

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	protobuf {
		protoc {
			artifact = 'com.google.protobuf:protoc:3.0.0'
		}
		plugins {
			javalite {
				artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
			}
		}
		generateProtoTasks {
			all().each { task ->
				task.builtins {
					remove java
				}
				task.plugins {
					javalite {}
				}
			}
		}
	}

	externalNativeBuild {
		ndkBuild {
			path '../mcl/ffi/java/android/jni/Android.mk'
		}
	}

	sourceSets{
		main{
			java{
				srcDirs += ['../mcl/ffi/java']
			}
		}
	}
}


task androidSourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}
afterEvaluate {
	publishing {
		publications {
			"sdkRelease"(MavenPublication) {
				from components.release
				groupId 'org.crowdnotifier'
				artifactId 'crowdnotifier-sdk-android'
				version android.defaultConfig.versionName + readPropertyWithDefault('bintrayVersionSuffix', '')
				artifact androidSourcesJar
			}
		}
	}
}

ext.readProperty = { paramName -> readPropertyWithDefault(paramName, null) }
ext.readPropertyWithDefault = { paramName, defaultValue ->
	if (project.hasProperty(paramName)) {
		return project.getProperties().get(paramName)
	} else {
		Properties properties = new Properties()
		if (project.rootProject.file('local.properties').exists()) {
			properties.load(project.rootProject.file('local.properties').newDataInputStream())
		}
		if (properties.getProperty(paramName) != null) {
			return properties.getProperty(paramName)
		} else {
			return defaultValue
		}
	}
}

bintray {
	user = readProperty('bintrayUser')
	key = readProperty('bintrayApikey')
	publications = ['sdkRelease']
	publish = true
	pkg {
		repo = 'crowdnotifier-sdk-android'
		name = 'crowdnotifier-sdk-android'
		userOrg = 'crowdnotifier'
		licenses = ['MPL-2.0']
	}
}

sonarqube {
	properties {
		property "sonar.projectName", "CrowdNotifier SDK Android"
		property "sonar.projectKey", "CrowdNotifier_crowdnotifier-sdk-android"
		property "sonar.organization", "crowdnotifier"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

dependencies {

	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'androidx.security:security-crypto:1.0.0-rc03'

	implementation 'com.google.android.material:material:1.2.1'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.google.protobuf:protobuf-lite:3.0.1'

	implementation "com.goterl.lazycode:lazysodium-android:4.2.0@aar"
	implementation "net.java.dev.jna:jna:5.6.0@aar"

	testImplementation 'junit:junit:4.+'
	androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


}